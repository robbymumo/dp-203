{
	"name": "transformed_data",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "sparkz5na780",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "cc2f3201-9d50-4a82-893d-42f1f246c5a6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/58f23e2f-b55c-4733-ab1f-17fc44624e2d/resourceGroups/dp203-z5na780/providers/Microsoft.Synapse/workspaces/synapsez5na780/bigDataPools/sparkz5na780",
				"name": "sparkz5na780",
				"type": "Spark",
				"endpoint": "https://synapsez5na780.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/sparkz5na780",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Import necessary libraries\r\n",
					"from pyspark.sql import SparkSession\r\n",
					"from pyspark.sql.functions import *"
				],
				"execution_count": 38
			},
			{
				"cell_type": "code",
				"metadata": {
					"microsoft": {
						"language": "python"
					},
					"collapsed": false
				},
				"source": [
					"%%pyspark\r\n",
					"df = spark.read.option(\"dateFormat\", \"MM/dd/yy HH:mm\").load('abfss://files@datalakez5na780.dfs.core.windows.net/sales_data/Sales Data.csv', format='csv', header=True)\r\n",
					"\r\n",
					"display(df.limit(10))\r\n",
					"\r\n",
					""
				],
				"execution_count": 39
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from pyspark.sql.functions import col, year, to_date\r\n",
					"\r\n",
					"# Convert Order Date to a date type, handling different formats and cleaning invalid dates\r\n",
					"df = df.withColumn('Order Date', to_date(col('Order Date'), 'MM/dd/yyyy'))\r\n",
					"\r\n",
					"# Filter out rows where Order Date could not be parsed (i.e., null values after conversion)\r\n",
					"df = df.filter(col('Order Date').isNotNull())\r\n",
					""
				],
				"execution_count": 40
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Rename columns\r\n",
					"df = df.withColumnRenamed(\"Quantity ordered\", \"Quantity_ordered\") \\\r\n",
					"        .withColumnRenamed(\"Order ID\", \"Order_ID\") \\\r\n",
					"       .withColumnRenamed(\"Price Each\", \"Price_Each\") \\\r\n",
					"       .withColumnRenamed(\"Order Date\", \"Order_Date\")\\\r\n",
					"       .withColumnRenamed(\"Purchase Address\", \"Purchase_Address\")\r\n",
					"\r\n",
					"# Save DataFrame as Parquet, overwriting existing data\r\n",
					"df.write.mode(\"overwrite\").parquet(\"abfss://files@datalakez5na780.dfs.core.windows.net/user/trusted-service-user/new_sales.parquet\")\r\n",
					"\r\n",
					""
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					""
				],
				"execution_count": null
			}
		]
	}
}